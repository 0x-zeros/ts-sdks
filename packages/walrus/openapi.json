{
	"openapi": "3.0.3",
	"info": {
		"title": "walrus-service",
		"description": "",
		"contact": { "name": "Mysten Labs", "email": "build@mystenlabs.com" },
		"license": { "name": "Apache-2.0" },
		"version": "1.8.1"
	},
	"paths": {
		"/v1/blobs/{blob_id}/confirmation": {
			"get": {
				"tags": ["Writing Blobs"],
				"summary": "Get storage confirmation.",
				"description": "Gets a signed storage confirmation from this storage node, indicating that all shards assigned\nto this storage node for the current epoch have stored their respective slivers.",
				"operationId": "get_storage_confirmation",
				"parameters": [
					{
						"name": "blob_id",
						"in": "path",
						"required": true,
						"schema": {}
					}
				],
				"responses": {
					"200": {
						"description": "A signed confirmation of storage",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ApiSuccessStorageConfirmation" }
							}
						}
					},
					"404": {
						"description": "The required slivers are not all stored",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 404, "message": "'Not Found' or more detailed information" }
								}
							}
						}
					},
					"409": {
						"description": "The blob has not been registered or has already expired",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 409, "message": "'Conflict' or more detailed information" }
								}
							}
						}
					}
				}
			}
		},
		"/v1/blobs/{blob_id}/inconsistent/{sliver_type}": {
			"post": {
				"tags": ["Recovery"],
				"summary": "Verify blob inconsistency.",
				"description": "Accepts an inconsistency proof from other storage nodes, verifies it, and returns an attestation\nthat the specified blob is inconsistent.",
				"operationId": "inconsistency_proof",
				"parameters": [
					{
						"name": "blob_id",
						"in": "path",
						"required": true,
						"schema": {}
					},
					{
						"name": "sliver_type",
						"in": "path",
						"required": true,
						"schema": { "$ref": "#/components/schemas/SliverType" }
					}
				],
				"requestBody": {
					"description": "BCS-encoded inconsistency proof",
					"content": {
						"application/octet-stream": { "schema": { "type": "string", "format": "binary" } }
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Signed invalid blob-id attestation",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ApiSuccessSignedMessage" }
							}
						}
					},
					"400": {
						"description": "The provided inconsistency proof was invalid",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 400, "message": "'Bad Request' or more detailed information" }
								}
							}
						}
					},
					"404": {
						"description": "Blob metadata is required but missing",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 404, "message": "'Not Found' or more detailed information" }
								}
							}
						}
					}
				}
			}
		},
		"/v1/blobs/{blob_id}/metadata": {
			"get": {
				"tags": ["Reading Blobs"],
				"summary": "Get blob metadata.",
				"description": "Gets the metadata associated with a Walrus blob, as a BCS encoded byte stream.",
				"operationId": "get_metadata",
				"parameters": [
					{
						"name": "blob_id",
						"in": "path",
						"required": true,
						"schema": {}
					}
				],
				"responses": {
					"200": {
						"description": "BCS encoded blob metadata",
						"content": {
							"application/octet-stream": { "schema": { "type": "string", "format": "binary" } }
						}
					},
					"403": {
						"description": "The requested metadata is blocked",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 403, "message": "'Forbidden' or more detailed information" }
								}
							}
						}
					},
					"404": {
						"description": "The requested metadata is unavailable",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 404, "message": "'Not Found' or more detailed information" }
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Writing Blobs"],
				"summary": "Store blob metadata.",
				"description": "Stores the metadata associated with a registered Walrus blob at this storage node. This is a\npre-requisite for storing the encoded slivers of the blob. The ID of the blob must first be\nregistered on Sui, after which storing the metadata becomes possible.\n\nThis endpoint may return an error if the node has not yet received the registration event from\nthe chain.",
				"operationId": "put_metadata",
				"parameters": [
					{
						"name": "blob_id",
						"in": "path",
						"required": true,
						"schema": {}
					}
				],
				"requestBody": {
					"description": "BCS-encoded metadata octet-stream",
					"content": {
						"application/octet-stream": { "schema": { "type": "string", "format": "binary" } }
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Metadata is already stored",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiSuccessMessage" } }
						}
					},
					"201": {
						"description": "Metadata successfully stored",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiSuccessMessage" } }
						}
					},
					"400": {
						"description": "The provided metadata cannot be verified",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 400, "message": "'Bad Request' or more detailed information" }
								}
							}
						}
					},
					"409": {
						"description": "The blob for the provided metadata is invalid",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 409, "message": "'Conflict' or more detailed information" }
								}
							}
						}
					}
				}
			}
		},
		"/v1/blobs/{blob_id}/slivers/{sliver_pair_index}/{sliver_type}": {
			"get": {
				"tags": ["Reading Blobs"],
				"summary": "Get blob slivers.",
				"description": "Gets the primary or secondary sliver identified by the specified blob ID and index. The\nindex should represent a sliver that is assigned to be stored at one of the shards managed\nby this storage node during this epoch.",
				"operationId": "get_sliver",
				"parameters": [
					{
						"name": "blob_id",
						"in": "path",
						"required": true,
						"schema": {}
					},
					{
						"name": "sliver_pair_index",
						"in": "path",
						"required": true,
						"schema": { "$ref": "#/components/schemas/SliverPairIndex" }
					},
					{
						"name": "sliver_type",
						"in": "path",
						"required": true,
						"schema": { "$ref": "#/components/schemas/SliverType" }
					}
				],
				"responses": {
					"200": {
						"description": "BCS encoded primary or secondary sliver",
						"content": {
							"application/octet-stream": { "schema": { "type": "string", "format": "binary" } }
						}
					},
					"400": {
						"description": "The requested sliver index is out of range",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 400, "message": "'Bad Request' or more detailed information" }
								}
							}
						}
					},
					"403": {
						"description": "The requested sliver is forbidden",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 403, "message": "'Forbidden' or more detailed information" }
								}
							}
						}
					},
					"404": {
						"description": "The requested sliver is unavailable",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 404, "message": "'Not Found' or more detailed information" }
								}
							}
						}
					},
					"421": {
						"description": "The requested sliver is not stored at a shard assigned to this storage node",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": {
										"code": 421,
										"message": "'Misdirected Request' or more detailed information"
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Writing Blobs"],
				"summary": "Store blob slivers.",
				"description": "Stores a primary or secondary blob sliver at the storage node.",
				"operationId": "put_sliver",
				"parameters": [
					{
						"name": "blob_id",
						"in": "path",
						"required": true,
						"schema": {}
					},
					{
						"name": "sliver_pair_index",
						"in": "path",
						"required": true,
						"schema": { "$ref": "#/components/schemas/SliverPairIndex" }
					},
					{
						"name": "sliver_type",
						"in": "path",
						"required": true,
						"schema": { "$ref": "#/components/schemas/SliverType" }
					}
				],
				"requestBody": {
					"description": "BCS-encoded sliver octet-stream",
					"content": {
						"application/octet-stream": { "schema": { "type": "string", "format": "binary" } }
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Sliver successfully stored",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiSuccessMessage" } }
						}
					},
					"400": {
						"description": "The provided sliver failed verification",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 400, "message": "'Bad Request' or more detailed information" }
								}
							}
						}
					},
					"409": {
						"description": "Blob metadata is required but missing",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 409, "message": "'Conflict' or more detailed information" }
								}
							}
						}
					},
					"421": {
						"description": "The requested sliver is not stored at a shard assigned to this storage node",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": {
										"code": 421,
										"message": "'Misdirected Request' or more detailed information"
									}
								}
							}
						}
					}
				}
			}
		},
		"/v1/blobs/{blob_id}/slivers/{sliver_pair_index}/{sliver_type}/{target_pair_index}": {
			"get": {
				"tags": ["Recovery"],
				"summary": "Get recovery symbols.",
				"description": "Gets a symbol held by this storage node to aid in sliver recovery.\n\nThe `sliver_type` is the target type of the sliver that will be recovered.\nThe `sliver_pair_index` is the index of the sliver pair that we want to access.\nThe `target_pair_index` is the index of the target sliver.",
				"operationId": "get_recovery_symbol",
				"parameters": [
					{
						"name": "blob_id",
						"in": "path",
						"required": true,
						"schema": {}
					},
					{
						"name": "sliver_pair_index",
						"in": "path",
						"required": true,
						"schema": { "$ref": "#/components/schemas/SliverPairIndex" }
					},
					{
						"name": "target_pair_index",
						"in": "path",
						"required": true,
						"schema": { "$ref": "#/components/schemas/SliverPairIndex" }
					},
					{
						"name": "sliver_type",
						"in": "path",
						"required": true,
						"schema": { "$ref": "#/components/schemas/SliverType" }
					}
				],
				"responses": {
					"200": {
						"description": "BCS encoded symbol",
						"content": {
							"application/octet-stream": { "schema": { "type": "string", "format": "binary" } }
						}
					},
					"400": {
						"description": "Invalid index for the sliver providing the recovery symbol",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 400, "message": "'Bad Request' or more detailed information" }
								}
							}
						}
					},
					"403": {
						"description": "The sliver providing the requested symbol is forbidden",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 403, "message": "'Forbidden' or more detailed information" }
								}
							}
						}
					},
					"404": {
						"description": "The sliver providing the requested symbol was not found",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": { "code": 404, "message": "'Not Found' or more detailed information" }
								}
							}
						}
					},
					"421": {
						"description": "The sliver providing the requested symbol is not stored at this node's shards",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestApiJsonError" },
								"example": {
									"error": {
										"code": 421,
										"message": "'Misdirected Request' or more detailed information"
									}
								}
							}
						}
					}
				}
			}
		},
		"/v1/blobs/{blob_id}/status": {
			"get": {
				"tags": ["Reading Blobs"],
				"summary": "Get the status of a blob.",
				"description": "Gets the status of a blob as viewed by this storage node, such as whether it is registered,\ncertified, or invalid, and the event identifier on Sui that led to the change in status.",
				"operationId": "get_blob_status",
				"parameters": [
					{
						"name": "blob_id",
						"in": "path",
						"required": true,
						"schema": {}
					}
				],
				"responses": {
					"200": {
						"description": "The status of the blob",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ApiSuccessBlobStatus" }
							}
						}
					}
				}
			}
		},
		"/v1/health": {
			"get": {
				"tags": ["Status"],
				"summary": "Get storage health information.",
				"description": "Gets the storage node's health information and basic running stats.",
				"operationId": "health_info",
				"parameters": [
					{
						"name": "detailed",
						"in": "query",
						"description": "When true, includes the status of each start in the health info.",
						"required": false,
						"schema": { "type": "boolean" }
					}
				],
				"responses": {
					"200": {
						"description": "Server is running",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ApiSuccessServiceHealthInfo" }
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"ApiSuccessBlobStatus": {
				"type": "object",
				"properties": {
					"success": {
						"type": "object",
						"properties": {
							"code": { "type": "integer", "format": "int32", "minimum": 0 },
							"data": {
								"oneOf": [
									{
										"type": "string",
										"description": "The blob does not exist (anymore) within Walrus.",
										"enum": ["nonexistent"]
									},
									{
										"type": "object",
										"required": ["invalid"],
										"properties": {
											"invalid": {
												"type": "object",
												"description": "The blob ID has been marked as invalid.",
												"required": ["event"],
												"properties": { "event": { "$ref": "#/components/schemas/EventID" } }
											}
										}
									},
									{
										"type": "object",
										"required": ["permanent"],
										"properties": {
											"permanent": {
												"type": "object",
												"description": "The blob exists within Walrus in a permanent state.",
												"required": [
													"end_epoch",
													"is_certified",
													"status_event",
													"deletable_counts"
												],
												"properties": {
													"deletable_counts": {},
													"end_epoch": {
														"type": "integer",
														"format": "int64",
														"description": "The latest epoch at which the blob expires (non-inclusive).",
														"minimum": 0
													},
													"initial_certified_epoch": {
														"allOf": [{}],
														"nullable": true
													},
													"is_certified": {
														"type": "boolean",
														"description": "Whether the blob is certified (true) or only registered (false)."
													},
													"status_event": { "$ref": "#/components/schemas/EventID" }
												}
											}
										}
									},
									{
										"type": "object",
										"required": ["deletable"],
										"properties": {
											"deletable": {
												"type": "object",
												"description": "The blob exists within Walrus; but there is no related permanent object, so it may be\ndeleted at any time.",
												"required": ["deletable_counts"],
												"properties": {
													"deletable_counts": {},
													"initial_certified_epoch": {
														"allOf": [{}],
														"nullable": true
													}
												}
											}
										}
									}
								],
								"description": "Contains the certification status of a blob.\n\nIf the a permanent blob exists, it also contains its end epoch and the ID of the Sui event\nfrom which the latest status (registered or certified) resulted."
							}
						}
					}
				}
			},
			"ApiSuccessMessage": {
				"type": "object",
				"properties": {
					"success": {
						"type": "object",
						"properties": {
							"code": { "type": "integer", "format": "int32", "minimum": 0 },
							"data": { "type": "string" }
						}
					}
				}
			},
			"ApiSuccessServiceHealthInfo": {
				"type": "object",
				"properties": {
					"success": {
						"type": "object",
						"properties": {
							"code": { "type": "integer", "format": "int32", "minimum": 0 },
							"data": {
								"type": "object",
								"description": "Represents information about the health of the storage node service.",
								"required": [
									"uptime",
									"epoch",
									"publicKey",
									"nodeStatus",
									"eventProgress",
									"shardSummary"
								],
								"properties": {
									"epoch": {
										"type": "integer",
										"format": "int64",
										"description": "The epoch of the storage node.",
										"minimum": 0
									},
									"eventProgress": {},
									"nodeStatus": {
										"type": "string",
										"description": "The status of the storage node."
									},
									"publicKey": {
										"type": "string",
										"format": "binary",
										"description": "The public key of the storage node."
									},
									"shardDetail": {
										"allOf": [{ "$ref": "#/components/schemas/ShardStatusDetail" }],
										"nullable": true
									},
									"shardSummary": { "$ref": "#/components/schemas/ShardStatusSummary" },
									"uptime": { "type": "object", "description": "The uptime of the service." }
								}
							}
						}
					}
				}
			},
			"ApiSuccessSignedMessage": {
				"type": "object",
				"properties": {
					"success": {
						"type": "object",
						"properties": {
							"code": { "type": "integer", "format": "int32", "minimum": 0 },
							"data": {
								"type": "object",
								"description": "A signed message from a storage node.",
								"required": ["serializedMessage", "signature"],
								"properties": {
									"serializedMessage": {
										"type": "string",
										"format": "binary",
										"description": "The BCS-encoded message.\n\nThis is serialized as a base64 string in human-readable encoding formats such as JSON."
									},
									"signature": {
										"type": "string",
										"format": "binary",
										"description": "The signature over the BCS encoded message."
									}
								}
							}
						}
					}
				}
			},
			"ApiSuccessStorageConfirmation": {
				"type": "object",
				"properties": {
					"success": {
						"type": "object",
						"properties": {
							"code": { "type": "integer", "format": "int32", "minimum": 0 },
							"data": {
								"oneOf": [
									{
										"type": "object",
										"required": ["signed"],
										"properties": { "signed": { "$ref": "#/components/schemas/SignedMessage" } }
									}
								],
								"description": "Confirmation from a storage node that it has stored the sliver pairs for a given blob."
							}
						}
					}
				}
			},
			"ApiSuccessStoredOnNodeStatus": {
				"type": "object",
				"properties": {
					"success": {
						"type": "object",
						"properties": {
							"code": { "type": "integer", "format": "int32", "minimum": 0 },
							"data": {
								"type": "string",
								"description": "Contains the storage status of a sliver or metadata.",
								"enum": ["nonexistent", "stored"]
							}
						}
					}
				}
			},
			"BlobId": {
				"type": "string",
				"format": "byte",
				"description": "A blob ID encoded as a URL-safe Base64 string, without the trailing equal (=) signs.",
				"example": "E7_nNXvFU_3qZVu3OH1yycRG7LZlyn1-UxEDCDDqGGU"
			},
			"EventID": {
				"type": "object",
				"required": ["txDigest", "eventSeq"],
				"properties": {
					"eventSeq": { "type": "string" },
					"txDigest": { "type": "string", "format": "binary" }
				},
				"example": { "txDigest": "EhtoQF9UpPyg5PsPUs69LdkcRrjQ3R4cTsHnwxZVTNrC", "eventSeq": 0 }
			},
			"RestApiJsonError": {
				"oneOf": [
					{
						"type": "object",
						"required": ["error"],
						"properties": {
							"error": {
								"allOf": [
									{ "allOf": [{}], "nullable": true },
									{
										"type": "object",
										"required": ["code", "message"],
										"properties": {
											"code": {
												"type": "integer",
												"format": "int32",
												"description": "INV: This is a valid status code.",
												"minimum": 0
											},
											"message": { "type": "string" }
										}
									}
								]
							}
						}
					}
				],
				"description": "API response body for error responses as JSON.\n\nContains the HTTP code as well as the textual reason."
			},
			"ServiceHealthInfo": {
				"type": "object",
				"description": "Represents information about the health of the storage node service.",
				"required": ["uptime", "epoch", "publicKey", "nodeStatus", "eventProgress", "shardSummary"],
				"properties": {
					"epoch": {
						"type": "integer",
						"format": "int64",
						"description": "The epoch of the storage node.",
						"minimum": 0
					},
					"eventProgress": {},
					"nodeStatus": { "type": "string", "description": "The status of the storage node." },
					"publicKey": {
						"type": "string",
						"format": "binary",
						"description": "The public key of the storage node."
					},
					"shardDetail": {
						"allOf": [{ "$ref": "#/components/schemas/ShardStatusDetail" }],
						"nullable": true
					},
					"shardSummary": { "$ref": "#/components/schemas/ShardStatusSummary" },
					"uptime": { "type": "object", "description": "The uptime of the service." }
				}
			},
			"ShardHealthInfo": {
				"type": "object",
				"description": "A shard with its status.",
				"required": ["shard", "status"],
				"properties": {
					"shard": {
						"type": "integer",
						"format": "int32",
						"description": "The identifier of the shard in the walrus system.",
						"minimum": 0
					},
					"status": { "$ref": "#/components/schemas/ShardStatus" }
				}
			},
			"ShardStatus": {
				"type": "string",
				"description": "The current state of a shard on the storage node.",
				"enum": ["unknown", "ready", "inTransfer", "inRecovery", "readOnly"]
			},
			"ShardStatusDetail": {
				"type": "object",
				"description": "Detail statuses of individual shards.\n\nProvides the status of each shard for which the node is responsible. Additionally, will provide\nthe status of shards which the node is not responsible for in the current epoch, but\nnonetheless currently stores. These will not appear in the [`ShardStatusSummary`].",
				"required": ["owned", "other"],
				"properties": {
					"other": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ShardHealthInfo" },
						"description": "Statuses of other shards the node currently stores."
					},
					"owned": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ShardHealthInfo" },
						"description": "Statuses of the shards for which the node is responsible in this epoch."
					}
				}
			},
			"ShardStatusSummary": {
				"type": "object",
				"description": "Summary of the shard statuses.\n\nSummarises the number of nodes for which this node is responsible, as well as those that are\nbeing transferred to another storage node.",
				"required": ["owned", "ownedShardStatus", "readOnly"],
				"properties": {
					"owned": {
						"type": "integer",
						"description": "The number of shards, for which this node is responsible.\n\nTheir statuses are summarized in `owned_shard_status`.",
						"minimum": 0
					},
					"ownedShardStatus": {},
					"readOnly": {
						"type": "integer",
						"description": "The number of shards, no longer owned by the node, that are read only,\ni.e., only serving reads from this node.",
						"minimum": 0
					}
				}
			},
			"SignedMessage": {
				"type": "object",
				"description": "A signed message from a storage node.",
				"required": ["serializedMessage", "signature"],
				"properties": {
					"serializedMessage": {
						"type": "string",
						"format": "binary",
						"description": "The BCS-encoded message.\n\nThis is serialized as a base64 string in human-readable encoding formats such as JSON."
					},
					"signature": {
						"type": "string",
						"format": "binary",
						"description": "The signature over the BCS encoded message."
					}
				}
			},
			"SliverPairIndex": {
				"type": "integer",
				"format": "int32",
				"description": "Represents the index of a sliver pair.\n\nAs blobs are encoded into as many pairs of slivers as there are shards in the committee,\nthis value ranges be from 0 to the number of shards (exclusive).",
				"minimum": 0
			},
			"SliverType": {
				"type": "string",
				"description": "A type indicating either a primary or secondary sliver.",
				"enum": ["primary", "secondary"]
			}
		}
	}
}
