// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetStorageConfirmationData, GetStorageConfirmationError, GetStorageConfirmationResponse, InconsistencyProofData, InconsistencyProofError, InconsistencyProofResponse, GetMetadataData, GetMetadataError, GetMetadataResponse, PutMetadataData, PutMetadataError, PutMetadataResponse, GetSliverData, GetSliverError, GetSliverResponse, PutSliverData, PutSliverError, PutSliverResponse, GetRecoverySymbolData, GetRecoverySymbolError, GetRecoverySymbolResponse, GetBlobStatusData, GetBlobStatusError, GetBlobStatusResponse, HealthInfoData, HealthInfoError, HealthInfoResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get storage confirmation.
 * Gets a signed storage confirmation from this storage node, indicating that all shards assigned
 * to this storage node for the current epoch have stored their respective slivers.
 */
export const getStorageConfirmation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetStorageConfirmationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStorageConfirmationResponse, GetStorageConfirmationError, ThrowOnError>({
        ...options,
        url: '/v1/blobs/{blob_id}/confirmation'
    });
};

/**
 * Verify blob inconsistency.
 * Accepts an inconsistency proof from other storage nodes, verifies it, and returns an attestation
 * that the specified blob is inconsistent.
 */
export const inconsistencyProof = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<InconsistencyProofData, ThrowOnError>) => {
    return (options?.client ?? client).post<InconsistencyProofResponse, InconsistencyProofError, ThrowOnError>({
        ...options,
        url: '/v1/blobs/{blob_id}/inconsistent/{sliver_type}'
    });
};

/**
 * Get blob metadata.
 * Gets the metadata associated with a Walrus blob, as a BCS encoded byte stream.
 */
export const getMetadata = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMetadataData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMetadataResponse, GetMetadataError, ThrowOnError>({
        ...options,
        url: '/v1/blobs/{blob_id}/metadata'
    });
};

/**
 * Store blob metadata.
 * Stores the metadata associated with a registered Walrus blob at this storage node. This is a
 * pre-requisite for storing the encoded slivers of the blob. The ID of the blob must first be
 * registered on Sui, after which storing the metadata becomes possible.
 *
 * This endpoint may return an error if the node has not yet received the registration event from
 * the chain.
 */
export const putMetadata = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutMetadataData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutMetadataResponse, PutMetadataError, ThrowOnError>({
        ...options,
        url: '/v1/blobs/{blob_id}/metadata'
    });
};

/**
 * Get blob slivers.
 * Gets the primary or secondary sliver identified by the specified blob ID and index. The
 * index should represent a sliver that is assigned to be stored at one of the shards managed
 * by this storage node during this epoch.
 */
export const getSliver = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSliverData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSliverResponse, GetSliverError, ThrowOnError>({
        ...options,
        url: '/v1/blobs/{blob_id}/slivers/{sliver_pair_index}/{sliver_type}'
    });
};

/**
 * Store blob slivers.
 * Stores a primary or secondary blob sliver at the storage node.
 */
export const putSliver = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutSliverData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutSliverResponse, PutSliverError, ThrowOnError>({
        ...options,
        url: '/v1/blobs/{blob_id}/slivers/{sliver_pair_index}/{sliver_type}'
    });
};

/**
 * Get recovery symbols.
 * Gets a symbol held by this storage node to aid in sliver recovery.
 *
 * The `sliver_type` is the target type of the sliver that will be recovered.
 * The `sliver_pair_index` is the index of the sliver pair that we want to access.
 * The `target_pair_index` is the index of the target sliver.
 */
export const getRecoverySymbol = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetRecoverySymbolData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRecoverySymbolResponse, GetRecoverySymbolError, ThrowOnError>({
        ...options,
        url: '/v1/blobs/{blob_id}/slivers/{sliver_pair_index}/{sliver_type}/{target_pair_index}'
    });
};

/**
 * Get the status of a blob.
 * Gets the status of a blob as viewed by this storage node, such as whether it is registered,
 * certified, or invalid, and the event identifier on Sui that led to the change in status.
 */
export const getBlobStatus = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetBlobStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBlobStatusResponse, GetBlobStatusError, ThrowOnError>({
        ...options,
        url: '/v1/blobs/{blob_id}/status'
    });
};

/**
 * Get storage health information.
 * Gets the storage node's health information and basic running stats.
 */
export const healthInfo = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<HealthInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthInfoResponse, HealthInfoError, ThrowOnError>({
        ...options,
        url: '/v1/health'
    });
};